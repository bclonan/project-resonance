# This is the Nginx configuration file for the 'control-lb' service.
# It sets up a basic HTTP server that acts as a reverse proxy and load balancer.

# Defines the number of worker processes. Auto means one per CPU core.
worker_processes auto;

# Defines global error log settings.
error_log /var/log/nginx/error.log warn;

# Events block defines connection processing.
events {
    # Maximum number of simultaneous connections that can be opened by a worker process.
    worker_connections 1024;
}

# HTTP block defines HTTP server settings.
http {
    # Include common MIME types.
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Log format for access logs.
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    # Access log settings.
    access_log /var/log/nginx/access.log main;

    # Sendfile improves performance by copying data directly between file descriptors.
    sendfile on;
    # tcp_nopush combines header and data in one packet.
    tcp_nopush on;
    # tcp_nodelay ensures data is sent immediately.
    tcp_nodelay on;

    # Keep-alive timeout for client connections.
    keepalive_timeout 65;

    # Gzip compression settings.
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # --- Upstream block defines the backend servers for load balancing ---
    upstream backend {
        # This is the default load balancing method: Round Robin.
        # Requests are distributed sequentially to the listed servers.
        server control-app:8000; # 'control-app' is the service name in docker-compose.yml
        # server control-app-2:8000; # Could add more app instances here
    }

    # --- Server block defines a virtual server ---
    server {
        listen 80; # Listen on port 80 for incoming HTTP requests

        # Location block defines how requests matching a certain URI are handled.
        location / {
            # Proxy requests to the 'backend' upstream group.
            proxy_pass http://backend;

            # --- Proxy Headers ---
            # These headers ensure the backend app receives correct client information.
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # --- Proxy Timeouts ---
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }
    }
}